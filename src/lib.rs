extern crate juniper;

#[cfg(test)]
mod tests {

    use juniper_from_schema::graphql_schema;

    graphql_schema! {
        schema {
          query: Query
        }

        type Query {
          helloWorld(name: String!): String!
        }
    }

    struct Query;

    // This trait is generated by `graphql_schema_from_file!` based on the schema
    impl QueryFields for Query {
        fn field_hello_world(
            &self,
            _executor: &juniper::Executor<Context>,
            name: String,
        ) -> juniper::FieldResult<String> {
            Ok(format!("Hello, {}!", name))
        }
    }

    struct Context;

    impl juniper::Context for Context {}

    #[test]
    fn hello_world() {
        let ctx = Context;

        let query = "query { helloWorld(name: \"Ferris\") }";

        let (result, errors) = juniper::execute_sync(
            query,
            None,
            &Schema::new(Query, juniper::EmptyMutation::new()),
            &juniper::Variables::new(),
            &ctx,
        )
        .unwrap();

        assert_eq!(errors.len(), 0);
        assert_eq!(
            result
                .as_object_value()
                .unwrap()
                .get_field_value("helloWorld")
                .unwrap()
                .as_scalar_value::<String>()
                .unwrap(),
            "Hello, Ferris!",
        );
    }

    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}
